<?php
// Call LocaleUtilTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'LocaleUtilTest::main');
}

require_once 'PHPUnit/Framework.php';

require_once 'LocaleUtil.php';

/**
 * Test class for LocaleUtil.
 * Generated by PHPUnit on 2007-09-17 at 10:42:17.
 */
class LocaleUtilTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('LocaleUtilTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    /**
     * @todo Implement testFormatDate().
     */
    public function testFormatDate() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testFormatDateTime().
     */
    public function testFormatDateTime() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testFormatMinutesAsHoursAndMinutes().
     */
    public function testFormatMinutesAsHoursAndMinutes() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    /**
     * @todo Implement testConvertToXpDateFormat().
     */
    public function testConvertToXpDateFormat() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }

    public function testConvertToXpDateFormat() {
    	$formatStr = 'Y-m-d';
    	$xpFormatStr = 'yyyy-MM-dd';
    	$this->assertEquals($xpFormatStr, CommonFunctions::convertToXpDateFormat($formatStr));

    	$formatStr = 'y-m-d';
    	$xpFormatStr = 'yy-MM-dd';
    	$this->assertEquals($xpFormatStr, CommonFunctions::convertToXpDateFormat($formatStr));

    	$formatStr = 'Y-n-d';
    	$xpFormatStr = 'yyyy-M-dd';
    	$this->assertEquals($xpFormatStr, CommonFunctions::convertToXpDateFormat($formatStr));

    	$formatStr = 'Y-m-j';
    	$xpFormatStr = 'yyyy-MM-d';
    	$this->assertEquals($xpFormatStr, CommonFunctions::convertToXpDateFormat($formatStr));

    	$formatStr = 'H:i:s';
    	$xpFormatStr = 'HH:mm:ss';
    	$this->assertEquals($xpFormatStr, CommonFunctions::convertToXpDateFormat($formatStr));

    	$formatStr = 'h:i:s';
    	$xpFormatStr = 'hh:mm:ss';
    	$this->assertEquals($xpFormatStr, CommonFunctions::convertToXpDateFormat($formatStr));

    	$formatStr = 'G:i:s';
    	$xpFormatStr = 'H:mm:ss';
    	$this->assertEquals($xpFormatStr, CommonFunctions::convertToXpDateFormat($formatStr));

    	$formatStr = 'g:i:s';
    	$xpFormatStr = 'h:mm:ss';
    	$this->assertEquals($xpFormatStr, CommonFunctions::convertToXpDateFormat($formatStr));

    	$formatStr = 'Y-m-d H:i';
    	$xpFormatStr = 'yyyy-MM-dd HH:mm';
    	$this->assertEquals($xpFormatStr, CommonFunctions::convertToXpDateFormat($formatStr));

    }
}

// Call LocaleUtilTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'LocaleUtilTest::main') {
    LocaleUtilTest::main();
}
?>
