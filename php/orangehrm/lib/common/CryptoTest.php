<?php
// Call CryptoTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'CryptoTest::main');
}

if(!defined('ROOT_PATH')) {

	define('ROOT_PATH', '/var/www/html/orangehrm-2.3');

}

require_once 'PHPUnit/Framework.php';

require_once 'Crypto.php';

/**
 * Test class for Crypto.
 * Generated by PHPUnit on 2008-05-15 at 11:56:19.
 */
class CryptoTest extends PHPUnit_Framework_TestCase
{
    /**
     * @var    Crypto
     * @access protected
     */

    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main()
    {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('CryptoTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp()
    {
       
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown()
    {
    }
	
	public function testEncryptDecrypt() {
	
		$values[] = "abcd";
		$values[] = 1234;
		$values[] = 1234.25;
		$values[] = 1234.3165434654;
		$values[] = "1234";
		$values[] = "abcd1234";
		$values[] = "!@#$%^&*()_+|";
		$values[] = "!@#abcs$%^&*()_+|";
		$values[] = "!@#$%^12345&*()_+|";
		
		$crypt = Crypto::getInstance();
		$i = 1;
		
		foreach($values as $value) {
		
			$expected = $value;
			$result = $crypt->decode($crypt ->encode($value));
			
			$this->assertEquals($expected, $result, "Failed at " . $i++);
		
		}
	
	}

}

// Call CryptoTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'CryptoTest::main') {
    CryptoTest::main();
}
?>
