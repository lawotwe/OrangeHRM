<?php
// Call HspAllotmentTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'HspAllotmentTest::main');
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once "testConf.php";

require_once 'HspAllotment.php';

require_once ROOT_PATH."/lib/confs/Conf.php";
require_once ROOT_PATH."/lib/common/UniqueIDGenerator.php";

/**
 * Test class for HspAllotment.
 * Generated by PHPUnit on 2007-10-16 at 15:47:04.
 */
class HspAllotmentTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('HspAllotmentTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    	$conf = new Conf();
    	$this->connection = mysql_connect($conf->dbhost.":".$conf->dbport, $conf->dbuser, $conf->dbpass);
        mysql_select_db($conf->dbname);

		$this->assertTrue(mysql_query("DELETE FROM ".HspAllotment::HSP_ALLOTMENT_DB_TABLE." WHERE ".HspAllotment::HSP_ALLOTMENT_DB_FIELD_ID."=10", $this->connection), mysql_error());

        $this->assertTrue(mysql_query("INSERT INTO ".HspAllotment::HSP_ALLOTMENT_DB_TABLE." (".HspAllotment::HSP_ALLOTMENT_DB_FIELD_ID.", ".HspAllotment::HSP_ALLOTMENT_DB_FIELD_NAME.", ".HspAllotment::HSP_ALLOTMENT_DB_FIELD_DESCRIPTION.") " .
        			"VALUES(10, 'Test', 'For testing purposes')"), mysql_error());

    	UniqueIDGenerator::getInstance()->resetIDs();
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    	$this->assertTrue(mysql_query("TRUNCATE ".HspAllotment::HSP_ALLOTMENT_DB_TABLE.";", $this->connection), mysql_error());

    	UniqueIDGenerator::getInstance()->resetIDs();
    }

    public function testFetchHspAllotments() {
		$allotments = HspAllotment::fetchHspAllotments();

		$expected[0] = array(10, 'Test', 'For testing purposes');

		$this->assertTrue(is_array($allotments));
		$this->assertEquals(count($expected), count($allotments));

		for ($i=0; $i<count($allotments); $i++) {
			$this->assertEquals($expected[$i][0], $allotments[$i]->getId());
			$this->assertEquals($expected[$i][1], $allotments[$i]->getName());
			$this->assertEquals($expected[$i][2], $allotments[$i]->getDescription());
		}
    }
}

// Call HspAllotmentTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'HspAllotmentTest::main') {
    HspAllotmentTest::main();
}
?>
