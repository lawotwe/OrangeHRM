<?php
// Call HolidaysTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "HolidaysTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once "testConf.php";

$_SESSION['WPATH'] = WPATH;

require_once "Leave.php";
require_once 'Holidays.php';
require_once ROOT_PATH."/lib/confs/Conf.php";

/**
 * Test class for Holidays.
 * Generated by PHPUnit_Util_Skeleton on 2006-12-29 at 13:24:41.
 */
class HolidaysTest extends PHPUnit_Framework_TestCase {
    public $classHoliday = null;
    public $connection = null;
	/**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("HolidaysTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
    	$this->classHoliday = new Holidays();
    	
    	$conf = new Conf();
    	
    	$this->connection = mysql_connect($conf->dbhost.":".$conf->dbport, $conf->dbuser, $conf->dbpass);
    	mysql_query("INSERT INTO `hs_hr_holidays` (`holiday_id`, `description`, `date`, `recurring`, `length`) VALUES (10, 'Independence', '".date('Y')."-07-04', ".Holidays::recurring.", 8)");   	
    	mysql_query("INSERT INTO `hs_hr_holidays` (`holiday_id`, `description`, `date`, `recurring`, `length`) VALUES (11, 'Poya', '".date('Y')."-01-04', 0, 4)");
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    	mysql_query("TRUNCATE TABLE `hs_hr_holidays`", $this->connection); 
    }    

    public function testIsHoliday1() {
    	$holiday = $this->classHoliday;
    	$expected[0] = array(date('Y').'-07-04', 8);
    	$expected[1] = array(date('Y').'-01-04', 4);    	
    	
    	$res = $holiday->isHoliday($expected[0][0]);
        
        $this->assertNotNull($res, 'Unexpected behavior');
        $this->assertEquals($res, $expected[0][1], 'Invalid Length');
        
        $res = $holiday->isHoliday($expected[1][0]); 
        
        $this->assertNotNull($res, 'Unexpected behavior');
        $this->assertEquals($res, $expected[1][1], 'Invalid Length');
    }

    public function testIsHoliday2() {  	
             
    	$holiday = $this->classHoliday;    	
    	$expected[0] = array((date('Y')+1).'-01-04', 4);
    	           
        $res = $holiday->isHoliday($expected[0][0]);
        
        $this->assertNull($res, 'Unexpected behavior');        
    }

    public function testAdd() {    	
        $holiday = $this->classHoliday;
        $expected[0] = array('Christmas', date('Y').'-12-25', Holidays::recurring, 8);
        
        $holiday->setDescription($expected[0][0]);
        $holiday->setDate($expected[0][1]);
        $holiday->setRecurring($expected[0][2]);
        $holiday->setLength($expected[0][3]);
        
        $holiday->add();
        
        $res = $holiday->isHoliday($expected[0][1]);
        
        $this->assertNotNull($res, 'Unexpected behavior');
        $this->assertEquals($res, $expected[0][3], 'Invalid Length');
        
        $res = $holiday->isHoliday((date('Y')+1).'-12-25');
        
        $this->assertNotNull($res, 'Unexpected behavior');
        $this->assertEquals($res, $expected[0][3], 'Invalid Length');
    }
    
    public function testEdit() {
       	$holiday = $this->classHoliday;
        $expected[0] = array(10, 'May Day', date('Y').'-05-01', Holidays::recurring, 8);
        
        $holiday->setHolidayId($expected[0][0]);
        $holiday->setDescription($expected[0][1]);
        $holiday->setDate($expected[0][2]);
        $holiday->setRecurring($expected[0][3]);
        $holiday->setLength($expected[0][4]);
        
        $holiday->edit();
        
        $res = $holiday->isHoliday($expected[0][2]);
        
        $this->assertNotNull($res, 'Unexpected behavior');
        $this->assertEquals($res, $expected[0][4], 'Invalid Length');
        
        $res = $holiday->isHoliday((date('Y')+1).'-05-01');
        
        $this->assertNotNull($res, 'Unexpected behavior');
        $this->assertEquals($res, $expected[0][4], 'Invalid Length');
    }

    public function testDelete() {
    	$holiday = $this->classHoliday;
        $expected[0] = array(10, date('Y').'-07-04', 8);
        
        $res = $holiday->isHoliday($expected[0][1]);
        
        $this->assertNotNull($res, 'Unexpected behavior');
        $this->assertEquals($res, $expected[0][2], 'Invalid Length');
        
        $holiday->setHolidayId($expected[0][0]);
        $holiday->delete();
        
        $res = $holiday->isHoliday($expected[0][1]);        
        $this->assertNull($res, 'Unexpected behavior');  
    }
}

// Call HolidaysTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "HolidaysTest::main") {
    HolidaysTest::main();
}
?>
