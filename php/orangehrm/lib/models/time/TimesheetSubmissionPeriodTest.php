<?php
// Call TimesheetSubmissionPeriodTest::main() if this source file is executed directly.
if (!defined("PHPUnit_MAIN_METHOD")) {
    define("PHPUnit_MAIN_METHOD", "TimesheetSubmissionPeriodTest::main");
}

require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once 'TimesheetSubmissionPeriod.php';

/**
 * Test class for TimesheetSubmissionPeriod.
 * Generated by PHPUnit_Util_Skeleton on 2007-03-27 at 16:43:39.
 */
class TimesheetSubmissionPeriodTest extends PHPUnit_Framework_TestCase {
	public $classTimesheetSubmissionPeriod = null;
    public $connection = null;
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once "PHPUnit/TextUI/TestRunner.php";

        $suite  = new PHPUnit_Framework_TestSuite("TimesheetSubmissionPeriodTest");
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
		$this->classTimesheetSubmissionPeriod = new TimesheetSubmissionPeriod();
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
    }

    public function testFetchTimesheetSubmissionPeriods() {
    	$this->classTimesheetSubmissionPeriod->setTimesheetPeriodId(1);

		$res = $this->classTimesheetSubmissionPeriod->fetchTimesheetSubmissionPeriods();

		$expected[0] = array(1, 'week', 7, 1, 1, 7, 'Weekly');

		$this->assertNotNull($res, "Returned nothing");

		$this->assertEquals(count($res), 1, "Didn't return the expected number of records");

		for ($i=0; $i<count($res); $i++) {
			$this->assertEquals($expected[$i][0], $res[$i]->getTimesheetPeriodId(), "Invalid timesheet period id");
			$this->assertEquals($expected[$i][1], $res[$i]->getName(), "Invalid timesheet period name");
			$this->assertEquals($expected[$i][2], $res[$i]->getFrequency(), "Invalid timesheet period frequency");
			$this->assertEquals($expected[$i][3], $res[$i]->getPeriod(), "Invalid timesheet period period");
			$this->assertEquals($expected[$i][4], $res[$i]->getStartDay(), "Invalid timesheet period start day");
			$this->assertEquals($expected[$i][5], $res[$i]->getEndDay(), "Invalid timesheet period end day");
			$this->assertEquals($expected[$i][6], $res[$i]->getDescription(), "Invalid timesheet period description");
		}
    }
}

// Call TimesheetSubmissionPeriodTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == "TimesheetSubmissionPeriodTest::main") {
    TimesheetSubmissionPeriodTest::main();
}
?>
