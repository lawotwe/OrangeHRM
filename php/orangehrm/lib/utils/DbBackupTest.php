<?php
// Call DbBackupTest::main() if this source file is executed directly.
if (!defined('PHPUnit_MAIN_METHOD')) {
    define('PHPUnit_MAIN_METHOD', 'DbBackupTest::main');
}

require_once 'PHPUnit/Framework.php';
require_once "PHPUnit/Framework/TestCase.php";
require_once "PHPUnit/Framework/TestSuite.php";

require_once "testConf.php";
require_once ROOT_PATH."/lib/confs/Conf.php";
require_once 'DbBackup.php';

/**
 * Test class for DbBackup.
 * Generated by PHPUnit on 2008-05-23 at 09:41:34.
 */
class DbBackupTest extends PHPUnit_Framework_TestCase {
    /**
     * Runs the test methods of this class.
     *
     * @access public
     * @static
     */
    public static function main() {
        require_once 'PHPUnit/TextUI/TestRunner.php';

        $suite  = new PHPUnit_Framework_TestSuite('DbBackupTest');
        $result = PHPUnit_TextUI_TestRunner::run($suite);
    }

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * @access protected
     */
    protected function setUp() {
	
    	$conf = new Conf();
    	$this->connection = mysql_connect($conf->dbhost.":".$conf->dbport, $conf->dbuser, $conf->dbpass);

    	$this->assertTrue($this->connection !== false);
        $this->assertTrue(mysql_select_db($conf->dbname));

        $this->assertTrue(mysql_query("CREATE TABLE IF NOT EXISTS `test_table1` (test_field_pk INT PRIMARY KEY, test_field_value1 VARCHAR(30), test_field_value2 INT);"));
		$this->assertTrue(mysql_query("CREATE TABLE IF NOT EXISTS `test_table2` (test_field_pk INT PRIMARY KEY, test_field_value1 VARCHAR(30), test_field_value2 INT);"));
		
		$this->assertTrue(mysql_query("TRUNCATE TABLE `test_table1`"));
		$this->assertTrue(mysql_query("TRUNCATE TABLE `test_table2`"));
		
		$key = md5('ABC') . md5('DEF') . md5('GHI') . md5('JKL');
		$path = ROOT_PATH . '/backup';
		
		$this->assertTrue(mysql_query("INSERT INTO `test_table1` VALUES(1, 'ABC', 123);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table1` VALUES(2, 'DEF', 456);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table1` VALUES(3, 'GHI', 789);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table1` VALUES(4, 'JLK', 123);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table1` VALUES(5, 'MNO', 456);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table1` VALUES(6, 'PQR', 789);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table1` VALUES(7, 'STU', 123);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table1` VALUES(8, 'VWX', 456);"));

		$this->assertTrue(mysql_query("INSERT INTO `test_table2` VALUES(1, AES_ENCRYPT('ABC', '$key'), 123);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table2` VALUES(2, AES_ENCRYPT('DEF', '$key'), 456);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table2` VALUES(3, AES_ENCRYPT('GHI', '$key'), 789);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table2` VALUES(4, AES_ENCRYPT('JLK', '$key'), 123);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table2` VALUES(5, AES_ENCRYPT('MNO', '$key'), 456);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table2` VALUES(6, AES_ENCRYPT('PQR', '$key'), 789);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table2` VALUES(7, AES_ENCRYPT('STU', '$key'), 123);"));
		$this->assertTrue(mysql_query("INSERT INTO `test_table2` VALUES(8, AES_ENCRYPT('VWX', '$key'), 456);"));
		
		
		$this->assertTrue(is_writable($path));
		$this->assertTrue(mysql_query("SELECT * INTO OUTFILE '$path/test.tbak' FROM `test_table1`;"), mysql_error());

    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
	
		$path = ROOT_PATH . '/backup';
		
    	$conf = new Conf();
    	$this->connection = mysql_connect($conf->dbhost.":".$conf->dbport, $conf->dbuser, $conf->dbpass);

    	$this->assertTrue($this->connection !== false);
        $this->assertTrue(mysql_select_db($conf->dbname));

        $this->assertTrue(mysql_query("DROP TABLE `test_table1`;"));
		$this->assertTrue(mysql_query("DROP TABLE `test_table2`;"));
		
		$this->assertTrue(unlink("$path/test.tbak"));
		@unlink("$path/backup1.tbak");
		
    }

    /**
     * @todo Implement testBackup().
     */
    public function testBackup() {
	
		$filePath = ROOT_PATH . '/backup/backup1.tbak';
	
		$lines[] = array("1", "ABC", "123");
		$lines[] = array("2", "DEF", "456");
		$lines[] = array("3", "GHI", "789");
		$lines[] = array("4", "JLK", "123");
		$lines[] = array("5", "MNO", "456");
		$lines[] = array("6", "PQR", "789");
		$lines[] = array("7", "STU", "123");
		$lines[] = array("8", "VWX", "456");
		
		//DbBackup::backup($table, $fields = '*', $path = null, $encrypted = false);
		
		/**
		  * Checks for the backup method with only the mandatory parameters
		  **/
		$this->assertTrue(DbBackup::backup($filePath, 'test_table1'));
		
		$fileContent = file($filePath);
		$i = 0;		
		
		foreach($lines as $expected) {
		
			$this->assertEquals($expected, explode("\t", trim($fileContent[$i++])));
		
		}
		
		$this->assertTrue(unlink($filePath));
		
		/**
		  * Checks for the backing up process without encryption
		  **/
		
		$this->assertTrue(DbBackup::backup($filePath, 'test_table1', array('test_field_pk', 'test_field_value1')));
		
		$fileContent = file($filePath);
		$i = 0;		
		
		foreach($lines as $expected) {
		
			$lineContent = explode("\t", trim($fileContent[$i++]));
		
			$this->assertEquals($expected[0], $lineContent[0]);
			$this->assertEquals($expected[1], $lineContent[1]);
		
		}
		
		$this->assertTrue(unlink($filePath));

		/**
		  * Checks for the backing up process with encryption
		  **/	
		  
		$this->assertTrue(DbBackup::backup($filePath, 'test_table1', array('test_field_pk', 'test_field_value1'), true));
		
		$fileContent = file($filePath);
		$i = 0;
		
		foreach($lines as $expected) {
		
			$lineContent = explode("\t", trim($fileContent[$i++]));
		
			$this->assertEquals($expected[0], $lineContent[0]);
			$this->assertNotEquals($expected[1], $lineContent[0]);
		
		}
		
		$this->assertTrue(unlink($filePath));
		
		/**
		  * Checks for the no encryption fields defined error
		  **/		
		try {
		
			$this->assertTrue(DbBackup::backup($filePath, 'test_table1', 'test_field_pk', true));
			
		} catch (DbBackupException $e) {
		
			$this->assertEquals(DbBackupException::ENCRYPTION_FIELDS_NOT_DEFINED, $e->getCode());
		
		}

				
    }

    /**
     * @todo Implement testRestore().
     */
    public function testRestore() {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
          'This test has not been implemented yet.'
        );
    }
}

// Call DbBackupTest::main() if this source file is executed directly.
if (PHPUnit_MAIN_METHOD == 'DbBackupTest::main') {
    DbBackupTest::main();
}
?>
